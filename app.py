from flask import Flask, request, jsonify, session
from flask_cors import CORS
import os
import google.generativeai as genai
from datetime import timedelta
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
CORS(app)

# üîê C·∫•u h√¨nh Flask v√† SQL Server
app.config["PERMANENT_SESSION_LIFETIME"] = timedelta(minutes=30)
app.secret_key = os.urandom(24)

# üî• C·∫•u h√¨nh k·∫øt n·ªëi SQL Server qua pyodbc
DB_USERNAME = "root"
DB_PASSWORD = "YRdlpsKbwapkgrBqFOSJltJuvChzyHpR"
DB_HOST = "mysql.railway.internal"
DB_PORT = "3306"
DB_NAME = "railway"
app.config['SQLALCHEMY_DATABASE_URI'] = f"mysql+pymysql://{DB_USERNAME}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

# ‚úÖ Kh·ªüi t·∫°o SQLAlchemy
db = SQLAlchemy(app)

# üîé T·∫°o model cho b·∫£ng h·ªôi tho·∫°i
class Conversation(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_message = db.Column(db.Text(collation="Latin1_General_CI_AI"), nullable=False)
    bot_reply = db.Column(db.Text(collation="Latin1_General_CI_AI"), nullable=False)
    created_at = db.Column(db.DateTime, server_default=db.func.current_timestamp())



# ‚úÖ T·∫°o b·∫£ng trong SQL Server n·∫øu ch∆∞a t·ªìn t·∫°i
with app.app_context():
    db.create_all()
    print("‚úÖ Table 'Conversation' ƒë√£ ƒë∆∞·ª£c t·∫°o ho·∫∑c ƒë√£ t·ªìn t·∫°i.")

# üîë API Key Google Gemini
GOOGLE_API_KEY = "AIzaSyD_SnGYXJ5puG0uG17exEhMju4o5DyClT8"
genai.configure(api_key=GOOGLE_API_KEY)

# ‚úÖ D√πng model Gemini
MODEL_NAME = "models/gemini-1.5-pro"
model = genai.GenerativeModel(MODEL_NAME)

# ‚úÖ L·∫•y l·ªãch s·ª≠ t·ª´ database
def get_conversation_history():
    history = []
    conversations = Conversation.query.order_by(Conversation.id).all()
    for conv in conversations:
        history.append({"role": "user", "parts": [conv.user_message]})
        history.append({"role": "model", "parts": [conv.bot_reply]})
    return history

# ‚úÖ L∆∞u tin nh·∫Øn v√†o database (chuy·ªÉn v·ªÅ UTF-8 tr∆∞·ªõc khi l∆∞u)
def save_message(user_message, bot_reply):
    try:
        # Ch·∫Øc ch·∫Øn r·∫±ng d·ªØ li·ªáu l√† chu·ªói Unicode tr∆∞·ªõc khi l∆∞u
        user_message = str(user_message)
        bot_reply = str(bot_reply)
        new_conv = Conversation(user_message=user_message, bot_reply=bot_reply)
        db.session.add(new_conv)
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå L·ªói khi l∆∞u v√†o database: {e}")


# ‚úÖ L·∫•y to√†n b·ªô l·ªãch s·ª≠ h·ªôi tho·∫°i
@app.route("/history", methods=["GET"])
def get_history():
    try:
        history = get_conversation_history()
        return jsonify({"history": history}), 200
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i: {e}")
        return jsonify({"error": "Failed to load conversation history"}), 500

# ‚úÖ G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ Gemini
@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    if not data or "message" not in data:
        return jsonify({"error": "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o"}), 400

    user_message = data["message"].strip()
    if not user_message:
        return jsonify({"error": "Message is empty"}), 400

    try:
        # ‚úÖ L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i t·ª´ database
        history = get_conversation_history()

        # ‚úÖ Kh·ªüi t·∫°o session n·∫øu ch∆∞a t·ªìn t·∫°i
        if "conversation" not in session:
            session["conversation"] = history

        # ‚úÖ Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o session
        session["conversation"].append({"role": "user", "parts": [user_message]})

        # ‚úÖ Kh·ªüi t·∫°o ChatSession t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i
        chat_session = model.start_chat(history=session["conversation"])

        # ‚úÖ G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ Gemini
        gemini_response = chat_session.send_message(user_message)
        bot_reply = gemini_response.text.strip() if gemini_response.text else "‚ö†Ô∏è Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ bot!"

        # ‚úÖ Th√™m ph·∫£n h·ªìi v√†o session
        session["conversation"].append({"role": "model", "parts": [bot_reply]})
        session.modified = True

        # ‚úÖ L∆∞u v√†o database
        save_message(user_message, bot_reply)

        return jsonify({"response": bot_reply}), 200

    except Exception as e:
        print(f"‚ùå L·ªói khi g·ªçi Gemini API: {e}")
        return jsonify({
            "error": "Failed to get response from Google Gemini",
            "details": str(e)
        }), 500

# ‚úÖ X√≥a to√†n b·ªô h·ªôi tho·∫°i
@app.route("/reset", methods=["POST"])
def reset_conversation():
    try:
        # üîÑ X√≥a to√†n b·ªô h·ªôi tho·∫°i t·ª´ database
        db.session.query(Conversation).delete()
        db.session.commit()

        # üîÑ X√≥a session
        session.pop("conversation", None)

        return jsonify({"status": "Conversation reset"}), 200

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå L·ªói khi reset h·ªôi tho·∫°i: {e}")
        return jsonify({"error": str(e)}), 500

# ‚úÖ Ki·ªÉm tra k·∫øt n·ªëi SQL Server
@app.route("/check-db", methods=["GET"])
def check_db():
    try:
        # Test k·∫øt n·ªëi
        db.session.execute("SELECT 1")
        return jsonify({"status": "Database connected"}), 200
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return jsonify({"error": str(e)}), 500

# ‚úÖ Ch·∫°y ·ª©ng d·ª•ng Flask
if __name__ == "__main__":
    app.run(debug=True)
